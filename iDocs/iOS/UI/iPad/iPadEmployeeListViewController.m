////  iPadEmployeeListViewController.m//  iDoc////  Created by Dmitry Likhachev on 12/6/09.//  Copyright 2009 KORUS Consulting. All rights reserved.//#import "CoreDataProxy.h"#import "iPadEmployeeListViewController.h"#import "iPadHeaderBodyFooterLayoutView.h"#import "iPadEmployeeInfoCell.h"#import "EmployeeListDataEntity.h"#import "Employee.h"#import "iPadThemeBuildHelper.h"#import "SystemDataEntity.h"@interface iPadEmployeeListViewController(PrivateMethods)- (void)loadDataFilteredByOrganization:(NSString *)organization;- (void)filterEmployeeListBySearchText:(NSString *)searchString;- (void)reloadDataForIndexedTable;- (void)setTitle:(NSString *)newTitle;@end@implementation iPadEmployeeListViewController@synthesize employees;@synthesize filteredEmployees;@synthesize employeesBySections;- (UIColor *)backgroundColor {    return [UIColor colorWithPatternImage:[UIImage imageNamed:[iPadThemeBuildHelper nameForImage:@"modal_popup_background_body_panel.png"]]];}#pragma mark custom methods - init- (id)initWithFrame:(CGRect)frame {    return [self initWithFrame:frame withControls:YES];}- (id)initWithFrame:(CGRect)frame withControls:(BOOL)newWithControls{	NSLog(@"iPadEmployeeList initWithFrame");	    withControls = newWithControls;	if ((self = [super initWithNibName:nil bundle:nil])) {        self.navigationController.navigationBar.hidden = YES;		CGRect employeeListTableFrame;        iPadHeaderBodyFooterLayoutView *container = nil;        if (withControls) {            container = [[iPadHeaderBodyFooterLayoutView alloc] init];            container.showFooter = NO;            container.frame = frame;                        employeeListTableFrame = CGRectMake(0.0f, 50.0f, container.bodyPanel.frame.size.width, container.bodyPanel.frame.size.height - 50.0f);                        CGRect employeeListFilterFrame = CGRectMake(0.0f, 0.0f, container.bodyPanel.frame.size.width, 50.0f);		            UIView *employeeListFilter = [[UIView alloc] init];            employeeListFilter.autoresizingMask = UIViewAutoresizingFlexibleWidth | UIViewAutoresizingFlexibleBottomMargin;            employeeListFilter.frame = employeeListFilterFrame;                        UISearchBar *employeeSearchBar = [[UISearchBar alloc] initWithFrame:employeeListFilter.bounds];            employeeSearchBar.autoresizingMask = UIViewAutoresizingFlexibleWidth;            employeeSearchBar.showsCancelButton = NO;            employeeSearchBar.tintColor = [iPadThemeBuildHelper commonHeaderBackColor];            employeeSearchBar.placeholder = NSLocalizedString(@"FilterPlaceHolderTitle", nil);            employeeSearchBar.delegate = self;            [employeeListFilter addSubview:employeeSearchBar];            [employeeSearchBar release];                                    [container.bodyPanel addSubview:employeeListFilter];            [employeeListFilter release];                        UIColor *buttonColor = [iPadThemeBuildHelper commonButtonFontColor2];             UIColor *shadowColor = [iPadThemeBuildHelper commonShadowColor2];                                UIButton *backButton = [container prepareHeaderLeftButtonWithCaption:NSLocalizedString(@"BackButtonTitle",nil)                                                                     captionColor:buttonColor                                                                   captionShadow:shadowColor                                                                      imageOrNil:nil];            [backButton addTarget:self action:@selector(navigateBack) forControlEvents:UIControlEventTouchUpInside];            [container.headerPanel addSubview:backButton];                        UIButton *filterButton = [container prepareHeaderRightButtonWithCaption:NSLocalizedString(@"FilterButtonTitle",nil)                                                                        captionColor:buttonColor                                                                      captionShadow:shadowColor                                                                         imageOrNil:nil];            [filterButton addTarget:self action:@selector(showCompanyFilter:) forControlEvents:UIControlEventTouchUpInside];            [container.headerPanel addSubview:filterButton];                        self.view = container;            [container release];                    }        else {            self.view.frame = frame;            employeeListTableFrame = self.view.bounds;            self.view.autoresizingMask = UIViewAutoresizingFlexibleWidth | UIViewAutoresizingFlexibleHeight;        }				//table:		employeeListTable = [[UITableView alloc] initWithFrame:employeeListTableFrame style:UITableViewStylePlain];		employeeListTable.backgroundColor = [UIColor clearColor];		employeeListTable.opaque = NO;		employeeListTable.rowHeight = constListItemCellHeight;		employeeListTable.autoresizingMask = UIViewAutoresizingFlexibleWidth | UIViewAutoresizingFlexibleHeight;		employeeListTable.delegate = self;		employeeListTable.dataSource = self;		if (withControls) {            [container.bodyPanel addSubview:employeeListTable];        }        else {            [self.view addSubview:employeeListTable];        }							EmployeeListDataEntity *employeeListDataEntity =             [[EmployeeListDataEntity alloc] initWithContext:[[CoreDataProxy sharedProxy] workContext]];          NSMutableArray *organizationsList = [[NSMutableArray alloc] initWithArray:[employeeListDataEntity selectAllOrganizations]];        //добавление псевдозначения "Все"        [organizationsList insertObject:NSLocalizedString(@"AllOrganizationsValue", nil) atIndex:0];                iPadTextListViewController *organizationsViewController = 			[[iPadTextListViewController alloc] initWithTextList:organizationsList andDelegate:self usingSearchBar:YES];        filterPopoverController = [[UIPopoverController alloc] initWithContentViewController:organizationsViewController];                [organizationsViewController release];        [organizationsList release];        [employeeListDataEntity release];                SystemDataEntity *systemEntity = [[SystemDataEntity alloc] initWithContext:[[CoreDataProxy sharedProxy] workContext]];        UserInfo *user = [systemEntity userInfo];        [self loadDataFilteredByOrganization:user.organization];        [systemEntity release];	}	return self;}- (void)loadDataFilteredByOrganization:(NSString *)organization {	NSLog(@"iPadEmployeeList loadDataFilteredByOrganization");        if (withControls) {        [self setTitle:organization];    }        //проверка на выбор псевдозначения "Все"    if ([organization isEqualToString:NSLocalizedString(@"AllOrganizationsValue", nil)])        organization = nil;        EmployeeListDataEntity *employeeListDataEntity =         [[EmployeeListDataEntity alloc] initWithContext:[[CoreDataProxy sharedProxy] workContext]];    self.employees = [employeeListDataEntity selectAllEmployeesInOrganization:organization];    NSMutableArray *employeesCopy = [self.employees mutableCopy];    self.filteredEmployees = employeesCopy;    [employeesCopy release];    NSMutableArray *emptyArray = [[NSMutableArray alloc] initWithCapacity:0];    self.employeesBySections = emptyArray;    [emptyArray release];    [employeeListDataEntity release];        [self reloadDataForIndexedTable];}- (void)reloadDataForIndexedTable {	NSLog(@"iPadEmployeeList reloadDataForIndexedTable");        [self.employeesBySections removeAllObjects];    	[collation release];	collation = [[AutoBuildIndexedCollation alloc] initAndBuildIndexForArray:self.filteredEmployees													 collationStringSelector:@selector(name)];      for (Employee *employee in self.filteredEmployees) {        NSInteger section = [collation sectionForObject:employee collationStringSelector:@selector(name)];        employee.indexSection = [NSNumber numberWithInteger:section];    }        NSInteger sectionsCount = [[collation sectionTitles] count];    NSMutableArray *sectionArrays = [NSMutableArray arrayWithCapacity:sectionsCount];    for (int i = sectionsCount; i > 0; i--) {        NSMutableArray *sectionArray = [NSMutableArray arrayWithCapacity:1];        [sectionArrays addObject:sectionArray];    }        for (Employee *employee in self.filteredEmployees) {        int sectionIndex = [employee.indexSection intValue];        [(NSMutableArray *)[sectionArrays objectAtIndex:sectionIndex] addObject:employee];    }        for (NSMutableArray *sectionArray in sectionArrays) {        NSArray *sortedSection = [collation sortedArrayFromArray:sectionArray collationStringSelector:@selector(name)];        [self.employeesBySections addObject:sortedSection];    }    [employeeListTable reloadData];	   }#pragma mark custom methods - view behavior- (void)navigateBack {	NSLog(@"iPadEmployeeList navigateBack");	[self.navigationController popViewControllerAnimated:YES];	}     - (void)showCompanyFilter:(UIButton *)sender {	NSLog(@"iPadEmployeeList showCompanyFilter");    [filterPopoverController presentPopoverFromRect:sender.frame                                              inView:sender.superview                           permittedArrowDirections:UIPopoverArrowDirectionUp                                            animated:YES];}- (void)searchBar:(UISearchBar *)searchBar textDidChange:(NSString *)searchText{    NSLog(@"iPadEmployeeList searchBar textDidChange: %@",searchText);    [self filterEmployeeListBySearchText:searchText];}- (void)setTitle:(NSString *)newTitle {	iPadHeaderBodyFooterLayoutView *container = (iPadHeaderBodyFooterLayoutView *)self.view;	[[container.headerPanel viewWithTag:constHeaderCenterTitleWithCaption] removeFromSuperview];    UIColor *titleColor = [iPadThemeBuildHelper commonHeaderFontColor2];    UIColor *shadowColor = [iPadThemeBuildHelper commonShadowColor2];      	[container.headerPanel addSubview:[container prepareHeaderCenterTitleWithCaption:NSLocalizedString(newTitle, nil)                                                                         captionColor:titleColor                                                                    captionShadow:shadowColor]];}- (void)setSelectedValueId:(NSString *)newSelectedValueId {	selectedValueId = newSelectedValueId;}- (void)setDelegate:(id<iPadEmployeeListViewControllerDelegate>)newDelegate {	delegate = newDelegate;}- (void)filterEmployeeListBySearchText:(NSString *)searchString {	NSLog(@"iPadEmployeeList filter by string: %@", searchString);		[self.filteredEmployees removeAllObjects];		if (searchString.length == 0) {        NSMutableArray *employeesCopy = [self.employees mutableCopy];		self.filteredEmployees = employeesCopy;        [employeesCopy release];	}	else if (searchString.length > 0) {		for (int i = 0; i < [self.employees count]; i++) {			NSString *employeeName = ((Employee *)[self.employees objectAtIndex:i]).name;			NSRange searchTextRangeInEmployeeName = [employeeName rangeOfString:searchString options:NSCaseInsensitiveSearch];			if (searchTextRangeInEmployeeName.location != NSNotFound) {				[self.filteredEmployees addObject:[self.employees objectAtIndex:i]];			}		}	}    [self reloadDataForIndexedTable];}- (void)didSelectText:(NSString *)text {    NSLog(@"iPadEmployeeList did select organization: %@", text);    [filterPopoverController dismissPopoverAnimated:YES];    [self loadDataFilteredByOrganization:text];}#pragma mark UIViewController methods- (void)viewWillAppear:(BOOL)animated {    [super viewWillAppear:animated];	    self.contentSizeForViewInPopover = self.view.frame.size;	}#pragma mark UITableViewDataSource and UITableViewDelegate methods- (NSInteger)numberOfSectionsInTableView:(UITableView *)tableView {    return [self.employeesBySections count];}- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section {	return [[self.employeesBySections objectAtIndex:section] count];}- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath {	    static NSString *cellIdentifier = @"EmployeeInfoCell";    iPadEmployeeInfoCell *cell = (iPadEmployeeInfoCell *)[tableView dequeueReusableCellWithIdentifier:cellIdentifier];	if (cell == nil) {		cell = [[[iPadEmployeeInfoCell alloc] initWithStyle:UITableViewCellStyleDefault reuseIdentifier:cellIdentifier] autorelease];	}    	Employee *employee = (Employee *)[[self.employeesBySections objectAtIndex:indexPath.section] objectAtIndex:indexPath.row];		[cell setEmployeeId:employee.id];	[cell setEmployeeName:employee.name];	[cell setEmployeePosition:employee.position];	[cell setEmployeeSubdivision:employee.subdivision];    [cell setEmployeePicture:[UIImage imageNamed:[iPadThemeBuildHelper nameForImage:@"profile_picture.png"]]];	if ([employee.id isEqualToString:selectedValueId]) {		[tableView selectRowAtIndexPath:indexPath animated:NO scrollPosition:UITableViewScrollPositionNone];	}    return cell;}- (void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath {	NSLog(@"iPadEmployeeList didSelectRowAtIndexPath indexPath.row: %i", indexPath.row);	Employee *employee = (Employee *)[[self.employeesBySections objectAtIndex:indexPath.section] objectAtIndex:indexPath.row];		selectedValueId = employee.id;	if (delegate != nil && [delegate respondsToSelector:@selector(saveValueWithId:andText:)])		[delegate saveValueWithId:employee.id andText:employee.name];	[self.navigationController popViewControllerAnimated:YES];	}- (NSArray *)sectionIndexTitlesForTableView:(UITableView *)tableView {    return [collation sectionIndexTitles];}- (NSString *)tableView:(UITableView *)tableView titleForHeaderInSection:(NSInteger)section {    if ([[self.employeesBySections objectAtIndex:section] count] > 0) {      return [[collation sectionTitles] objectAtIndex:section];    }    return nil;}- (NSInteger)tableView:(UITableView *)tableView sectionForSectionIndexTitle:(NSString *)title atIndex:(NSInteger)index {  return [collation sectionForSectionIndexTitleAtIndex:index];}#pragma mark other methods- (void)didReceiveMemoryWarning {	NSLog(@"iPadEmployeeList didReceiveMemoryWarning");		    // Releases the iPadSearchFilter if it doesn't have a superview.    [super didReceiveMemoryWarning];    // Release any cached data, images, etc. that aren't in use.}- (void)dealloc {	self.employees = nil;	self.filteredEmployees = nil;    self.employeesBySections = nil;	[employeeListTable release];    [filterPopoverController release];	[collation release];     [super dealloc];}@end