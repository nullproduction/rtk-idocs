////  iPadAttachmentViewController.m//  iDoc////  Created by Dmitry Likhachev on 11/29/09.//  Copyright 2009 KORUS Consulting. All rights reserved.//#import "iPadAttachmentViewController.h"#import "HFSUILabel.h"#import "iPadThemeBuildHelper.h"#import "SystemDataEntity.h"#import "SupportFunctions.h"#import "UIWebView+Block.h"@interface iPadAttachmentViewController(PrivateMethods)- (void)closeButtonPressed;@end@implementation iPadAttachmentViewController#pragma mark custom methods - data handling- (void)loadAttachmentFile:(NSString *)attachmentFileName withPopupPanelHeader:(NSString *)headerTitle {	NSLog(@"iPadAttachmentViewController loadAttachment:%@ withPopupPanelHeader:%@", attachmentFileName, headerTitle);	if (headerTitle != nil) {		[self setTitleForPopupPanelHeader:headerTitle];	}        [attachmentWebView stopLoading];    attachmentWebView.alpha = 0;	    NSString *attachmentPath = [SupportFunctions createPathForAttachment:attachmentFileName];	NSURL *attachmentUrl = [NSURL fileURLWithPath:attachmentPath];    NSURLRequest *request = [NSURLRequest requestWithURL:attachmentUrl];	[attachmentWebView loadRequest:request];}     - (void)clearCurrentContent {    NSLog(@"iPadAttachmentViewController resetCurrentAttachment");    [attachmentWebView stringByEvaluatingJavaScriptFromString:@"document.body.innerHTML = \"\";"];}#pragma mark custom methods - init- (id)initWithFrame:(CGRect)newFrame {	NSLog(@"iPadAttachmentViewController initWithNibName");	if ((self = [super initWithNibName:nil bundle:nil])) {	        		self.navigationController.navigationBarHidden = YES;		self.view.autoresizesSubviews = YES;		self.view.autoresizingMask = UIViewAutoresizingFlexibleWidth | UIViewAutoresizingFlexibleHeight;		self.view.frame = newFrame;				attachmentWebView = [[UIWebView alloc] initWithFrame:self.view.bounds];		attachmentWebView.delegate = self;		attachmentWebView.scalesPageToFit = YES;		attachmentWebView.autoresizingMask = UIViewAutoresizingFlexibleWidth | UIViewAutoresizingFlexibleHeight;		[self.view addSubview:attachmentWebView];			}	return self;}- (id)initWithPlaceholder:(iPadPopupLayoutView *)popupPanel {	NSLog(@"iPadAttachmentViewController initWithPlaceholder");	if((self=[super initWithNibName:nil bundle:nil])){		container = [[iPadHeaderBodyFooterLayoutView alloc] init];		container.frame = popupPanel.containerView.frame;		container.showFooter = NO;				attachmentWebView = [[UIWebView alloc] initWithFrame:container.bodyPanel.bounds];		attachmentWebView.delegate = self;		attachmentWebView.scalesPageToFit = YES;		attachmentWebView.contentScaleFactor = 3.0f;		attachmentWebView.autoresizingMask = UIViewAutoresizingFlexibleWidth | UIViewAutoresizingFlexibleHeight;        attachmentWebView.alpha = 0;        		[container.bodyPanel addSubview:attachmentWebView];			        UIColor *buttonColor = [iPadThemeBuildHelper commonButtonFontColor2];        UIColor *shadowColor = [iPadThemeBuildHelper commonShadowColor2]; 		closeButton = [container prepareHeaderLeftButtonWithCaption:@"CancelButtonTitle"                                                        captionColor:buttonColor                                                       captionShadow:shadowColor                                                         imageOrNil:nil];		[closeButton addTarget:self action:@selector(closeButtonPressed) forControlEvents:UIControlEventTouchUpInside];		[container.headerPanel addSubview:closeButton];		self.view = container;	}	return self;}#pragma mark custom methods - view behavior- (void)setDelegate:(id<iPadAttachmentViewControllerDelegate>) newDelegate {	delegate = newDelegate;}- (void)setTitleForPopupPanelHeader:(NSString *)newTitle {	if (container != nil && [container isMemberOfClass:iPadHeaderBodyFooterLayoutView.class]) {		[[container.headerPanel viewWithTag:constHeaderCenterTitleWithCaption] removeFromSuperview];        UIColor *titleColor = [iPadThemeBuildHelper commonHeaderFontColor2];        UIColor *shadowColor = [iPadThemeBuildHelper commonShadowColor2];                 [container.headerPanel addSubview:[container prepareHeaderCenterTitleWithCaption:NSLocalizedString(newTitle, nil)                                                                             captionColor:titleColor                                                                        captionShadow:shadowColor]];	}}- (void)closeButtonPressed {	NSLog(@"iPadAttachmentViewController closeButtonPressed");		if (delegate != nil && [delegate respondsToSelector:@selector(attachmentViewCloseButtonPressed)]) {		[delegate attachmentViewCloseButtonPressed];	}	}- (void)setCloseButtonHidden:(BOOL)isHidden {	closeButton.hidden = isHidden;}#pragma mark UIViewController methods- (void)viewWillAppear:(BOOL)animated {	[super viewWillAppear:animated];}#pragma mark UIWebView delegate methods- (BOOL)webView:(UIWebView *)webView shouldStartLoadWithRequest:(NSURLRequest *)request navigationType:(UIWebViewNavigationType) navigationType {    [webView block];	    webView.alpha = 0;    return YES;}- (void)webViewDidFinishLoad:(UIWebView *)webView {    webView.alpha = 1;	[webView unlock];	}- (void)webView:(UIWebView *)webView didFailLoadWithError:(NSError *)error {    webView.alpha = 1;	[webView unlock];	}#pragma mark other methods- (void)didReceiveMemoryWarning {	NSLog(@"iPadAttachmentViewController didReceiveMemoryWarning");		    // Releases the iPadSearchFilter if it doesn't have a superview.    [super didReceiveMemoryWarning];    // Release any cached data, images, etc. that aren't in use.}- (void)dealloc {    if (container != nil) {        [container release];    }	[attachmentWebView release];	    [super dealloc];}@end