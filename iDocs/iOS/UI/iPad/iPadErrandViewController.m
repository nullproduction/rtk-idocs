////  iPadErrandViewController.m//  iDoc////  Created by Dmitry Likhachev on 02/08/10.//  Copyright 2009 KORUS Consulting. All rights reserved.//#import "iPadErrandViewController.h"#import "iPadTaskDocDescCell.h"#import "iPadDateSelectCell.h"#import "iPadTextViewCell.h"#import "CoreDataProxy.h"#import "iPadHeaderBodyFooterLayoutView.h"#import "iPadTextEditCell.h"#import "UITableView+Shrinkable.h"#import "iPadThemeBuildHelper.h"#import "ActionToSyncDataEntity.h"#import "ResolutionTemplateDataEntity.h"#import "ResolutionTemplate.h"#import "EmployeeListDataEntity.h"#import "TaskDataEntity.h"#import "DocErrand.h"@interface iPadErrandViewController(PrivateMethods)- (void)prepareErrandWorkflowActionWithId:(NSString *)actionId andType:(NSString *)actionType;- (NSArray *)prepareErrandCreateOrUpdateActionWithId:(NSString *)actionId andType:(NSString *)actionType usingExecutors:(NSArray *)executors;- (NSArray *)updateErrandsAndActionsWithExecutors:(NSArray *)executors;- (void)closeErrandButtonPressed;- (void)getScrollPosition:(id)field;- (void)saveValueWithId:(NSString *)valueId andText:(NSString *)valueText forParamWithIndex:(int)paramIndex;- (NSString *)getDateDisplayValue:(NSDate *)storedDate;- (void)showResolutionTemplates:(UIButton *)sender;- (void)showEmployeesDictionary:(UIButton *)sender;- (void)didSelectEmployeeWithName:(NSString *)employeeName andId:(NSString *)employeeId;- (void)doScrollAfterDelay:(NSIndexPath *)indexPath;@end@implementation iPadErrandViewController@synthesize errand, action, errandActions, errandExecutors, taskId;#pragma mark custom methods - init- (id)initWithFrame:(CGRect)frame {	NSLog(@"iPadErrand initWithFrame");		if ((self = [super initWithNibName:nil bundle:nil])) {		iPadHeaderBodyFooterLayoutView *container = [[iPadHeaderBodyFooterLayoutView alloc] init];		container.showFooter = NO;		container.frame = frame;        		CGRect errandTableViewFrame = CGRectInset(container.bodyPanel.bounds, 0, 5);		errandTableView = [[UITableView alloc] initWithFrame:errandTableViewFrame style:UITableViewStylePlain];		errandTableView.autoresizingMask = UIViewAutoresizingFlexibleWidth | UIViewAutoresizingFlexibleHeight;		errandTableView.backgroundColor = [UIColor clearColor];		errandTableView.opaque = NO;		errandTableView.scrollEnabled = YES;		errandTableView.dataSource = self;				errandTableView.delegate = self;		[container.bodyPanel addSubview:errandTableView];		        UIColor *buttonColor = [iPadThemeBuildHelper commonButtonFontColor2];           UIColor *shadowColor = [iPadThemeBuildHelper commonShadowColor2];          		UIButton *closeButton = [container prepareHeaderLeftButtonWithCaption:@"CancelButtonTitle"                                                                  captionColor:buttonColor                                                                 captionShadow:shadowColor                                                                   imageOrNil:nil];		[closeButton addTarget:self action:@selector(errandViewCloseButtonPressed) forControlEvents:UIControlEventTouchUpInside];		[container.headerPanel addSubview:closeButton];				self.view = container;		[container release];				[[NSNotificationCenter defaultCenter] addObserver:self                                                  selector:@selector(keyboardDidShow)                                                      name:UIKeyboardDidShowNotification                                                    object:nil];                [[NSNotificationCenter defaultCenter] addObserver:self                                                  selector:@selector(deviceOrientationDidChange:)                                                      name:UIDeviceOrientationDidChangeNotification                                                    object:nil];                resolutionsList = [[NSMutableArray alloc] initWithCapacity:0];                docEntity = [[DocDataEntity alloc] initWithContext:[[CoreDataProxy sharedProxy] workContext]];        actionsEntity = [[ActionToSyncDataEntity alloc] initWithContext:[[CoreDataProxy sharedProxy] workContext]];        taskEntity = [[TaskDataEntity alloc] initWithContext:[[CoreDataProxy sharedProxy] workContext]];    }	return self;}- (void)setPopupAuxPanel:(id<iPadPopupLayoutViewDelegate>)newAuxPanel {    auxPanel = newAuxPanel;}- (void)keyboardDidShow {	NSLog(@"iPadErrandViewController keyboardDidShow");	if (indexToScroll == nil) return;	NSLog(@"index to scroll to is %d", indexToScroll.row);	[errandTableView scrollToRowAtIndexPath:indexToScroll atScrollPosition:UITableViewScrollPositionTop animated:YES];	}- (void)deviceOrientationDidChange:(NSNotification *)notification {    UIDeviceOrientation orientation = [[UIDevice currentDevice] orientation];    if (orientation == UIDeviceOrientationFaceUp || orientation == UIDeviceOrientationFaceDown || orientation == UIDeviceOrientationUnknown || currentOrientation == orientation) {        return;    }    [NSObject cancelPreviousPerformRequestsWithTarget:self selector:@selector(relayoutLayers) object:nil];    currentOrientation = orientation;    [self performSelector:@selector(orientationChangedMethod) withObject:nil afterDelay:0];}- (void)orientationChangedMethod {    if (errandActionsPopover != nil && [errandActionsPopover isPopoverVisible]) {        [errandActionsPopover dismissPopoverAnimated:YES];    }        if (employeeCompactFilterPopover != nil && [employeeCompactFilterPopover isPopoverVisible]) {        [employeeCompactFilterPopover dismissPopoverAnimated:YES];    }    if (resolutionTemplatesPopover != nil && [resolutionTemplatesPopover isPopoverVisible]) {        [resolutionTemplatesPopover dismissPopoverAnimated:YES];    }}- (void)setDelegate:(id<iPadErrandViewControllerDelegate>)newDelegate {	delegate = newDelegate;}#pragma mark load data- (void)prepareDataForErrand:(DocErrand *)errandData               withTaskAction:(ActionToSync *)actionData                     orTaskId:(NSString *)errandTaskId                    usingMode:(int)mode {	NSLog(@"iPadErrand loadErrand usingMode:%i", mode);		self.errand = errandData;    self.action = actionData;    self.taskId = errandTaskId;	viewMode = mode;    if (viewMode != constModeView) {        ResolutionTemplateDataEntity *resolutionTemplateEntity =             [[ResolutionTemplateDataEntity alloc] initWithContext:[[CoreDataProxy sharedProxy] workContext]];        NSArray *resolutions = [resolutionTemplateEntity selectAll];        [resolutionsList removeAllObjects];        for (ResolutionTemplate *resolution in resolutions) {            NSString *text = resolution.text;            if ([text length] > 0)                 [resolutionsList addObject:text];        }        [resolutionTemplateEntity release];    }        executorCellHeight = 55.0f;	    accessLevel = (mode == constModeView) ? constAccessTypeView : constAccessTypeAll; 		[errandTableView reloadData];    	iPadHeaderBodyFooterLayoutView *container = (iPadHeaderBodyFooterLayoutView *)self.view;    UIColor *buttonColor = [iPadThemeBuildHelper commonButtonFontColor2];    UIColor *shadowColor = [iPadThemeBuildHelper commonShadowColor2];          [[container.headerPanel viewWithTag:constHeaderRightButton] removeFromSuperview];         if (viewMode == constModeCreate) {        HFSUIButton *errandActionsButton = [container prepareHeaderRightButtonWithCaption:@"SubmitErrandButtonTitle"                                                                              captionColor:buttonColor                                                                             captionShadow:shadowColor                                                                               imageOrNil:nil];		[errandActionsButton addTarget:self action:@selector(executeTaskAction:) forControlEvents:UIControlEventTouchUpInside];		errandActionsButton.tag = constHeaderRightButton;		[container.headerPanel addSubview:errandActionsButton];	}    else {        //получение списка действий по поручению        self.errandActions = [NSMutableArray arrayWithArray:[docEntity selectActionsForErrandWithId:errand.id]];        if (errand.errandActions == nil && errand.systemActionToSyncId != nil &&             [actionsEntity selectActionToSyncById:errand.systemActionToSyncId                                    andRequestType:constRequestTypeCreateOrUpdateErrandAction] != nil) {            DocErrandAction *newErrandAction = [docEntity createDocErrandAction];            newErrandAction.id = constErrandActionTypeDeleteLocal;            newErrandAction.type = constErrandActionTypeDeleteLocal;            newErrandAction.name = NSLocalizedString(@"DeleteErrandButtonTitle", nil);            newErrandAction.systemSortIndex = [NSNumber numberWithInt:1];            [errandActions addObject:action];        }                //создание кнопок по действиям по поручению        if ([errandActions count] > 0) {            NSString *buttonTitle = ([errandActions count] == 1) ?                                     ((DocErrandAction *)[errandActions objectAtIndex:0]).name :                                    NSLocalizedString(@"WorkflowActionsTitle", nil);            HFSUIButton *errandActionsButton = [container prepareHeaderRightButtonWithCaption:buttonTitle                                                                                  captionColor:buttonColor                                                                                 captionShadow:shadowColor                                                                                   imageOrNil:nil];            if ([errandActions count] == 1) {                [errandActionsButton addTarget:self                                         action:@selector(executeErrandAction:)                               forControlEvents:UIControlEventTouchUpInside];            }            else {                [errandActionsButton addTarget:self                                         action:@selector(showErrandActionsList:)                               forControlEvents:UIControlEventTouchUpInside];            }            errandActionsButton.tag = constHeaderRightButton;            [container.headerPanel addSubview:errandActionsButton];        }    }	[container setNeedsLayout];}#pragma mark actions methods- (NSArray *)getErrandActionsList {    return [NSArray arrayWithArray:errandActions];}- (void)showErrandActionsList:(UIButton *)sender {    if (errandActionsPopover == nil) {        iPadErrandActionListViewController *actionSheet = [[iPadErrandActionListViewController alloc] init];        [actionSheet setActionsDelegate:self];        errandActionsPopover = [[UIPopoverController alloc] initWithContentViewController:actionSheet];            [actionSheet release];        errandActionsPopover.popoverContentSize = CGSizeMake(250.0f, constListItemCellHeight*[errandActions count]);    }    [errandActionsPopover presentPopoverFromRect:sender.bounds                                            inView:sender                        permittedArrowDirections:UIPopoverArrowDirectionUp                                        animated:YES];	}- (void)executeTaskAction:(id)sender {    //выполнение действия по задаче - создание нового поручения    if ((errand.text != nil && [errand.text length] > 0) && [errandExecutors count] > 0) {        if (delegate != nil && [delegate respondsToSelector:@selector(submitErrandCreateActionsToServer:)]) {            NSArray *actions =                 [self prepareErrandCreateOrUpdateActionWithId:action.actionId andType:action.actionType usingExecutors:errandExecutors];            [delegate submitErrandCreateActionsToServer:actions];        }    }    else {        NSString *errorMessage = [NSString stringWithString:NSLocalizedString(@"RequiredFieldsNotFilledMessage", nil)];        if ([errandExecutors count] == 0)            errorMessage = [errorMessage stringByAppendingFormat:@" %@", NSLocalizedString(@"RequiredFieldExecutorId", nil)];        if ([errandExecutors count] == 0 && (errand.text == nil || [errand.text length] == 0))            errorMessage = [errorMessage stringByAppendingString:@","];        if ((errand.text == nil || [errand.text length] == 0))            errorMessage = [errorMessage stringByAppendingFormat:@" %@", NSLocalizedString(@"RequiredFieldErrandText", nil)];		        [self reportClientError:errorMessage];    }    }- (void)executeErrandAction:(id)sender {    //вызов обработки действия по кнопке (при одном действии)    [self didSelectErrandActionAtIndexPath:[NSIndexPath indexPathForRow:0 inSection:0]];}- (void)didSelectErrandActionAtIndexPath:(NSIndexPath *)indexPath {    [errandActionsPopover dismissPopoverAnimated:NO];        //обработка вызванного действия поручения в зависимости от идентификатора действия    NSString *actionId = ((DocErrandAction *)[errandActions objectAtIndex:indexPath.row]).id;    NSString *actionType = ((DocErrandAction *)[errandActions objectAtIndex:indexPath.row]).type;        if ([constErrandActionTypeDeleteLocal isEqualToString:actionType]) {        NSString *actionToSyncId = errand.systemActionToSyncId;                NSString *newMajorExecutorId = nil;        for (DocErrandExecutor *executor in errand.executors) {            newMajorExecutorId = [actionsEntity removeErrandExecutorId:executor.executorId fromActionToSyncWithId:actionToSyncId];        }                [docEntity deleteErrandWithId:errand.id forDocWithId:errand.doc.id];        if (newMajorExecutorId != nil) {            [docEntity setMajorExecutorStateForErrandWithActionToSyncId:actionToSyncId andExecutorId:newMajorExecutorId];        }                if (delegate != nil && [delegate respondsToSelector:@selector(deleteErrandActionButtonPressed)]) {            [delegate deleteErrandActionButtonPressed];        }     }    else if ([constErrandActionTypeCancel isEqualToString:actionType]) {        [self prepareErrandWorkflowActionWithId:actionId andType:actionType];        [docEntity deleteErrandActionsForErrandWithId:action.errandId inDocWithId:action.docId];        [docEntity cancelErrandForDocWithId:action.docId andErrandWithId:action.errandId];                if (delegate != nil && [delegate respondsToSelector:@selector(submitErrandWorkflowActionToServer:)]) {            [delegate submitErrandWorkflowActionToServer:action];        }    }    else if ([constErrandActionTypeDeleteProject isEqualToString:actionType]) {        [self prepareErrandWorkflowActionWithId:actionId andType:actionType];        [docEntity deleteErrandWithId:action.errandId forDocWithId:action.docId];        if (delegate != nil && [delegate respondsToSelector:@selector(submitErrandWorkflowActionToServer:)]) {            [delegate submitErrandWorkflowActionToServer:action];        }    }    else if ([constErrandActionTypeSaveProject isEqualToString:actionType] ||             [constErrandActionTypeSendOnExecutionProject isEqualToString:actionType]) {        if ((errand.text != nil && [errand.text length] > 0) && [errandExecutors count] > 0) {            if (delegate != nil && [delegate respondsToSelector:@selector(submitErrandWorkflowActionToServer:)]) {                if (errand.systemActionToSyncId != nil) {                    [actionsEntity deleteActionToSyncWithId:errand.systemActionToSyncId];                }                [self prepareErrandCreateOrUpdateActionWithId:actionId andType:actionType usingExecutors:errandExecutors];                if ([constErrandActionTypeSendOnExecutionProject isEqualToString:actionType]) {                    [docEntity deleteErrandActionsForErrandWithId:action.errandId inDocWithId:action.docId];                }                [delegate submitErrandWorkflowActionToServer:action];            }        }        else {            NSString *errorMessage = [NSString stringWithString:NSLocalizedString(@"RequiredFieldsNotFilledMessage", nil)];            if ([errandExecutors count] == 0)                errorMessage = [errorMessage stringByAppendingFormat:@" %@", NSLocalizedString(@"RequiredFieldExecutorId", nil)];            if ([errandExecutors count] == 0 && (errand.text == nil || [errand.text length] == 0))                errorMessage = [errorMessage stringByAppendingString:@","];            if ((errand.text == nil || [errand.text length] == 0))                errorMessage = [errorMessage stringByAppendingFormat:@" %@", NSLocalizedString(@"RequiredFieldErrandText", nil)];		            [self reportClientError:errorMessage];        }    }}- (void)prepareErrandWorkflowActionWithId:(NSString *)actionId andType:(NSString *)actionType {	NSLog(@"iPadErrand prepareErrandWorkflowActionWithId: %@ andType: %@", actionId, actionType);         //при действиях по маршруту с поручениями/проектами - создать новое действие    ActionToSync *errandAction = [actionsEntity createActionToSync];    NSString *actionToSyncId =         [NSString stringWithFormat: @"%@_%.0f", @"action", [NSDate timeIntervalSinceReferenceDate] * 1000.0];    errandAction.id = actionToSyncId;    errandAction.requestType = [NSNumber numberWithInt:constRequestTypeErrandWorkflowAction];     errandAction.systemSyncStatus = constSyncStatusWorking;    errandAction.actionId = actionId;    errandAction.actionType = actionType;    errandAction.actionDate = [SupportFunctions dateTime]; //iDocSync compatability    errandAction.errandId = errand.id;    errandAction.taskId = taskId;    errandAction.docId = errand.doc.id;    self.action = errandAction;        errand.systemActionToSyncId = actionToSyncId;}- (NSArray *)prepareErrandCreateOrUpdateActionWithId:(NSString *)actionId                                              andType:(NSString *)actionType                                       usingExecutors:(NSArray *)executors {	NSLog(@"iPadErrand prepareErrandCreateOrUpdateActionWithId: %@ andType: %@", actionId, actionType);      //обновление информации по действию создания поручения/проекта    //при проекте - создать действие, при поручении - обновить    if ([constErrandActionTypeSaveProject isEqualToString:actionType] ||         [constErrandActionTypeSendOnExecutionProject isEqualToString:actionType]) {        ActionToSync *errandAction = [actionsEntity createActionToSync];        NSString *actionToSyncId =             [NSString stringWithFormat: @"%@_%.0f", @"action", [NSDate timeIntervalSinceReferenceDate] * 1000.0];        errandAction.id = actionToSyncId;        errandAction.requestType = [NSNumber numberWithInt:constRequestTypeCreateOrUpdateErrandAction];        errandAction.systemSyncStatus = constSyncStatusWorking;        errandAction.actionId = actionId;        errandAction.actionType = actionType;        errandAction.actionDate = [SupportFunctions dateTime]; //iDocSync compatability;        errandAction.actionIsFinal = [NSNumber numberWithBool:NO];        errandAction.actionResultText = nil;        errandAction.docId = errand.doc.id;        errandAction.taskId = taskId;        errandAction.errandId = errand.id;        self.action = errandAction;                errand.systemActionToSyncId = actionToSyncId;    }    action.errandText = errand.text;    action.errandDueDate = (errand.dueDate != nil) ? [SupportFunctions convertDateToXMLDateTimeString:errand.dueDate] : nil;    action.errandOnControl = (errand.dueDate != nil) ? constTrueStringValue : constFalseStringValue;        //обновление информации по поручению       NSArray *actions = [self updateErrandsAndActionsWithExecutors:executors];        //добавление новой задачи "на контроле" при работе с поручениями    if (![constErrandActionTypeSaveProject isEqualToString:actionType] &&         ![constErrandActionTypeSendOnExecutionProject isEqualToString:actionType] &&        errand.dueDate != nil) {        TaskDataEntity* _taskEntity = [[TaskDataEntity alloc] initWithContext:[[CoreDataProxy sharedProxy] workContext]];        [_taskEntity createTaskOnControlForDocWithId:errand.doc.id];        [_taskEntity release];    }        return actions;}- (NSArray *)updateErrandsAndActionsWithExecutors:(NSArray *)executors {	NSLog(@"iPadErrand updateErrandsAndActionsWithExecutors");        //сохранение проектов поручений - один проект - много исполнителей; одно действие - много исполнителей;    //сохранение поручений - одно поручение - один исполнитель; одно действие - один/много исполнителей;     NSMutableArray *clonedActions = [[NSMutableArray alloc] initWithCapacity:0];    if ([constErrandActionTypeSaveProject isEqualToString:action.actionType ] ||         [constErrandActionTypeSendOnExecutionProject isEqualToString:action.actionType]) {        [docEntity deleteErrandExecutorsForErrandWithId:errand.id inDocWithId:errand.doc.id];        for (int i = 0; i < [executors count]; i++) {            TIToken *executorToken = [executors objectAtIndex:i];            if (i == 0) {                action.errandExecutorId = executorToken.tokenId;                action.systemErrandMajorExecutorId = executorToken.tokenId;            }             else {                action.errandExecutorId =                     [NSString stringWithFormat:@"%@%@%@", action.errandExecutorId, constSeparatorSymbol, executorToken.tokenId];            }                    DocErrandExecutor *executor = [docEntity createDocErrandExecutor];            executor.executorId = executorToken.tokenId;            executor.isMajorExecutor = [NSNumber numberWithBool:(i == 0)];            executor.executorName = [SupportFunctions createShortFIO:executorToken.title];            executor.systemSortIndex = [NSNumber numberWithInt:(i + 1)];                        Task* task = [taskEntity selectTaskById:action.taskId];            NSString* systemCurrentErrandId = task.systemCurrentErrandId;            if( nil == systemCurrentErrandId ) {                errand.parentId = task.doc.id;            }            else {                errand.parentId = systemCurrentErrandId;            }            DocErrand* errandParent = [docEntity selectErrandWithId:errand.parentId inDocWithId:errand.doc.id];            NSString* number = [docEntity selectChildErrandsMaxNumberForDocWithId:errand.doc.id andParentId:errand.parentId];            if( nil != errandParent && nil != errandParent.number ) {                errand.number = [NSString stringWithFormat:@"%@.%@",errandParent.number, number];            }            else {                errand.number = [NSString stringWithFormat:@"%@", number];            }                        executor.errand = errand;        }        [clonedActions addObject:action];    }    else if ([constTaskActionTypeAddErrand isEqualToString:action.actionType] ||             [constTaskActionTypeAddMultiErrand isEqualToString:action.actionType]) {        for (int i = 0; i < [executors count]; i++) {            TIToken *executorToken = [executors objectAtIndex:i];            if (i == 0) {                action.errandExecutorId = executorToken.tokenId;                action.systemErrandMajorExecutorId = ([constTaskActionTypeAddMultiErrand isEqualToString:action.actionType] == YES)                                                     ? executorToken.tokenId : constEmptyStringValue;                NSLog(@"action.systemErrandMajorExecutorId = %@, executorToken.tokenId = %@", action.systemErrandMajorExecutorId, executorToken.tokenId);                [clonedActions addObject:action];                                [docEntity deleteErrandExecutorsForErrandWithId:errand.id inDocWithId:errand.doc.id];                DocErrandExecutor *executor = [docEntity createDocErrandExecutor];                executor.executorId = executorToken.tokenId;                executor.isMajorExecutor =                         [NSNumber numberWithBool:[constTaskActionTypeAddMultiErrand isEqualToString:action.actionType] == YES];                executor.executorName = [SupportFunctions createShortFIO:executorToken.title];                executor.systemSortIndex = [NSNumber numberWithInt:i + 1];                                Task* task = [taskEntity selectTaskById:action.taskId];                NSString* systemCurrentErrandId = task.systemCurrentErrandId;                if( nil == systemCurrentErrandId ) {                    errand.parentId = task.doc.id;                }                else {                    errand.parentId = systemCurrentErrandId;                }                DocErrand* errandParent = [docEntity selectErrandWithId:errand.parentId inDocWithId:errand.doc.id];                NSString* number = [docEntity selectChildErrandsMaxNumberForDocWithId:errand.doc.id andParentId:errand.parentId];                if( nil != errandParent && nil != errandParent.number ) {                    errand.number = [NSString stringWithFormat:@"%@.%@",errandParent.number, number];                }                else {                    errand.number = [NSString stringWithFormat:@"%@", number];                }                 executor.errand = errand;            }            else {                NSString *actionId = nil;                if ([constTaskActionTypeAddMultiErrand isEqualToString:action.actionType]) {                    action.errandExecutorId = [NSString stringWithFormat:@"%@%@%@", action.errandExecutorId, constSeparatorSymbol, executorToken.tokenId];                    actionId = action.id;                }                else {                    ActionToSync *actionClone = [actionsEntity cloneActionToSync:action excludingRelations:nil];                    actionClone.errandExecutorId = executorToken.tokenId;                    actionClone.errandId = constEmptyStringValue;                    actionClone.systemErrandMajorExecutorId = constEmptyStringValue;                    actionId = [NSString stringWithFormat: @"%@_%.0f", @"action", [NSDate timeIntervalSinceReferenceDate] * 100.0 + i];                    actionClone.id = actionId;                    [clonedActions addObject:actionClone];                 }                DocErrand *errandClone =                    [docEntity cloneDocErrand:errand                           excludingRelations:[NSArray arrayWithObjects:constDocEntity, constDocErrandExecutorEntity, nil]];                                errandClone.id = [NSString stringWithFormat: @"%@_%.0f", @"errand", [NSDate timeIntervalSinceReferenceDate] * 1000.0 + i];                errandClone.authorName = [SupportFunctions createShortFIO:errand.authorName];                errandClone.systemActionToSyncId = actionId;                errandClone.doc = errand.doc;                                DocErrandExecutor *executor = [docEntity createDocErrandExecutor];                executor.executorId = executorToken.tokenId;                executor.isMajorExecutor = [NSNumber numberWithBool:NO];                executor.executorName = [SupportFunctions createShortFIO:executorToken.title];                executor.systemSortIndex = [NSNumber numberWithInt:i + 1];                                Task* task = [taskEntity selectTaskById:action.taskId];                NSString* systemCurrentErrandId = task.systemCurrentErrandId;                if( nil == systemCurrentErrandId ) {                    errandClone.parentId = task.doc.id;                }                else {                    errandClone.parentId = systemCurrentErrandId;                }                DocErrand* errandParent = [docEntity selectErrandWithId:errandClone.parentId inDocWithId:errandClone.doc.id];                NSString* number = [docEntity selectChildErrandsMaxNumberForDocWithId:errandClone.doc.id andParentId:errandClone.parentId];                if( nil != errandParent && nil != errandParent.number ) {                    errandClone.number = [NSString stringWithFormat:@"%@.%@",errandParent.number, number];                }                else {                    errandClone.number = [NSString stringWithFormat:@"%@", number];                }                                executor.errand = errandClone;            }        }    }    NSArray *actions = [NSArray arrayWithArray:clonedActions];    [clonedActions release];    return actions;}- (void)errandViewCloseButtonPressed {	NSLog(@"iPadErrand errandViewCloseButtonPressed");	if (delegate != nil && [delegate respondsToSelector:@selector(errandViewCloseButtonPressed)]) {		[delegate errandViewCloseButtonPressed];	}	}#pragma mark custom methods - panel behavior// employeeListViewController delegate method- (void)saveValueWithId:(NSString *)valueId andText:(NSString *)valueText {	NSLog(@"Errand saveValueWithId:%@ andText:%@", valueId, valueText);	[self saveValueWithId:valueId andText:valueText forParamWithIndex:2];	}	// other view controllers delegate method- (void)saveValue:(NSString *)value {	NSLog(@"Errand saveValue:%@", value);		NSIndexPath *indexPath = [errandTableView indexPathForSelectedRow];		[self saveValueWithId:constEmptyStringValue andText:value forParamWithIndex:indexPath.row];	}- (NSString *)getDateDisplayValue:(NSDate *)storedDate {	NSString *displayValue =     (storedDate == nil) ? NSLocalizedString(@"ErrandNoControlTitle",nil) : [SupportFunctions convertDateToString:storedDate withFormat:constDateTimeFormatDateJustPicked]; 	return displayValue;}- (void)saveValueWithId:(NSString *)valueId andText:(NSString *)valueText forParamWithIndex:(int)paramIndex {	NSLog(@"Errand saveValueWithId:%@ andText:%@ forParamWithIndex: %i", valueId, valueText, paramIndex);	    NSIndexPath *indexPath = [NSIndexPath indexPathForRow:paramIndex inSection:0];	iPadTokenFieldCell *tokenFieldCell = nil;    switch (paramIndex) {		case 1:			errand.dueDate = [SupportFunctions convertXMLDateTimeStringToDate:valueText];	            NSString *displayValue = [self getDateDisplayValue:errand.dueDate];			[(iPadDateSelectCell *)[errandTableView cellForRowAtIndexPath:indexPath] setValue:displayValue withAccessType:accessLevel];				break;        case 2:	            tokenFieldCell = ((iPadTokenFieldCell *)[errandTableView cellForRowAtIndexPath:indexPath]);            [tokenFieldCell addValue:valueText withValueId:valueId forAccessType:accessLevel];            self.errandExecutors = tokenFieldCell.tokenField.tokenField.tokensArray;            shouldPresentEmployeeListPopover = NO;//запрещаем выводить список до следующего входа в поле списка по tokenFieldDidBeginEditing			break;		case 3:			errand.text = valueText;			[(iPadTextEditCell *)[errandTableView cellForRowAtIndexPath:indexPath] setValue:valueText];						break;				default:			break;	}	}- (void)showResolutionTemplates:(UIButton *)sender {	NSLog(@"iPadErrand showResolutionTemplates");    if (resolutionTemplatesPopover == nil) {        iPadTextListViewController *resolutionsViewController =             [[iPadTextListViewController alloc] initWithTextList:resolutionsList andDelegate:self];        resolutionTemplatesPopover = [[UIPopoverController alloc] initWithContentViewController:resolutionsViewController];        [resolutionsViewController release];    }    [resolutionTemplatesPopover presentPopoverFromRect:sender.frame                                                 inView:sender.superview                               permittedArrowDirections:UIPopoverArrowDirectionAny                                               animated:YES];}- (void)showEmployeesDictionary:(UIButton *)sender {	NSLog(@"iPadErrand showEmployeesDictionary");    if (employeeListViewController == nil) {        employeeListViewController = [[iPadEmployeeListViewController alloc] initWithFrame:self.view.frame];        [employeeListViewController setDelegate:self];    }    [self.navigationController pushViewController:employeeListViewController animated:YES];}#pragma mark TITokenField and iPadEmployeeListCompactViewContollerDelegate- (void)showCompactEmployeesPopover {    NSIndexPath *indexPath = [NSIndexPath indexPathForRow:2 inSection:0];    iPadTokenFieldCell *cell = (iPadTokenFieldCell *)[errandTableView cellForRowAtIndexPath:indexPath];    TITokenField *tokenField = cell.tokenField.tokenField;        if (employeeCompactFilterPopover == nil) {        if (employeeListCompactViewController == nil) {            employeeListCompactViewController =             [[iPadEmployeeListCompactViewContoller alloc] initWithFrame:CGRectMake(0.0f, 0.0f, 400.0f, 400.0f) listDelegate:self];        }        employeeCompactFilterPopover = [[UIPopoverController alloc] initWithContentViewController:employeeListCompactViewController];        }    [employeeCompactFilterPopover presentPopoverFromRect:tokenField.bounds                                                   inView:tokenField                                 permittedArrowDirections:UIPopoverArrowDirectionLeft animated:NO];}- (void)doScrollAfterDelay:(NSIndexPath *)indexPath {    [errandTableView scrollToRowAtIndexPath:indexPath atScrollPosition:UITableViewScrollPositionTop animated:NO];    errandTableView.scrollEnabled = NO;        if (!shouldPresentEmployeeListPopover) {        shouldPresentEmployeeListPopover = YES;        return;       }        [self showCompactEmployeesPopover];}- (void)tokenFieldDidBeginEditing:(TITokenField *)tokenField {        NSIndexPath *indexPath = [NSIndexPath indexPathForRow:2 inSection:0];    [self performSelector:@selector(doScrollAfterDelay:) withObject:indexPath afterDelay:0.01];}- (void)tokenFieldShouldEndEditing:(TITokenField *)tokenField {    errandTableView.scrollEnabled = YES;       [employeeCompactFilterPopover dismissPopoverAnimated:YES];}- (void)tokenField:(TITokenField *)tokenField didChangeToFrame:(CGRect)frame {    NSLog(@"tokenField didChangeToFrame with height: %f", frame.size.height);            float offset = frame.size.height + 10.0f - executorCellHeight;    executorCellHeight = executorCellHeight + offset;    NSIndexPath *executorCellIndexPath = [NSIndexPath indexPathForRow:2 inSection:0];    UITableViewCell *executorCell = [errandTableView cellForRowAtIndexPath:executorCellIndexPath];    CGRect cellFrame = executorCell.frame;    cellFrame.size.height = executorCellHeight;    executorCell.frame = cellFrame;        NSIndexPath *errandTextCellIndexPath = [NSIndexPath indexPathForRow:3 inSection:0];    UITableViewCell *errandTextCell = [errandTableView cellForRowAtIndexPath:errandTextCellIndexPath];    cellFrame = errandTextCell.frame;    cellFrame.origin.y += offset;    errandTextCell.frame = cellFrame;        [errandTableView reloadData];//    [errandTableView reloadRowsAtIndexPaths:[NSArray arrayWithObjects:executorCellIndexPath, errandTextCellIndexPath, nil] //                           withRowAnimation:UITableViewRowAnimationFade];}- (void)tokenFieldTextDidChange:(TITokenField *)tokenField textFieldText:(NSString *)textFieldText {    NSLog(@"tokenFieldTextDidChange:%@", textFieldText);    if (!shouldPresentEmployeeListPopover)         return;        NSString *searchText = [textFieldText stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceAndNewlineCharacterSet]];    [employeeListCompactViewController filterEmployeeListBySearchText:searchText];        if (![employeeCompactFilterPopover isPopoverVisible]) {        [self showCompactEmployeesPopover];    }}- (void)didSelectEmployeeWithName:(NSString *)employeeName andId:(NSString *)employeeId {	NSLog(@"iPadErrand didSelectEmployeeWithName:%@ andId:%@", employeeName, employeeId);    NSIndexPath *indexPath = [NSIndexPath indexPathForRow:2 inSection:0];    iPadTokenFieldCell *cell = ((iPadTokenFieldCell *)[errandTableView cellForRowAtIndexPath:indexPath]);    [cell addValue:employeeName withValueId:employeeId forAccessType:accessLevel];    self.errandExecutors = cell.tokenField.tokenField.tokensArray;    [employeeCompactFilterPopover dismissPopoverAnimated:YES];}#pragma mark UITableViewDelegate and UITableViewDataSource methods- (NSInteger)numberOfSectionsInTableView:(UITableView *)tableView {    return 1;}- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section {	int numberOfRowsInSection = (viewMode == constModeView) ? 5 : 4;	return numberOfRowsInSection;}- (CGFloat)tableView:(UITableView *)tableView heightForRowAtIndexPath:(NSIndexPath *)indexPath {	float height = 0.0f;	if (indexPath.row == 0)		height = 70.0f;	else if (indexPath.row == 1)		height = 55.0f;    else if (indexPath.row == 2)        height = executorCellHeight;	else if (indexPath.row == 3 && (viewMode == constModeEdit || viewMode == constModeCreate))		height = 325.0f;	else if (indexPath.row == 3 && (viewMode == constModeView))		height = 160.0f;	else if (indexPath.row == 4)		height = 155.0f;    return height;}- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath {	NSString *cellIdentifier;	if (indexPath.row == 0) {		cellIdentifier = @"TaskDocDescCell";		iPadTaskDocDescCell *cell = (iPadTaskDocDescCell *)[tableView dequeueReusableCellWithIdentifier:cellIdentifier];		if (cell == nil) {			cell = [[[iPadTaskDocDescCell alloc] initWithStyle:UITableViewCellStyleDefault reuseIdentifier:cellIdentifier] autorelease];            [cell setDocTypeName:errand.doc.typeName];		            [cell setDocDesc:errand.doc.desc];		}		return cell;	}	else if (indexPath.row == 1) {		cellIdentifier = @"ErrandDueDateSelectCell";		iPadDateSelectCell *cell = (iPadDateSelectCell *)[tableView dequeueReusableCellWithIdentifier:cellIdentifier];		if (cell == nil) {			cell = [[[iPadDateSelectCell alloc] initWithStyle:UITableViewCellStyleDefault reuseIdentifier:cellIdentifier] autorelease];            [cell setTitle:NSLocalizedString(@"ErrandDueDateSelectViewTitle", nil)];            NSString *displayValue = [self getDateDisplayValue:errand.dueDate];            [cell setValue:displayValue withAccessType:accessLevel];		}								return cell;	}	else if (indexPath.row == 2) {		cellIdentifier = @"ErrandExecutorCell";		iPadTokenFieldCell *cell = (iPadTokenFieldCell *)[tableView dequeueReusableCellWithIdentifier:cellIdentifier];		if (cell == nil) {			cell = [[[iPadTokenFieldCell alloc] initWithStyle:UITableViewCellStyleDefault reuseIdentifier:cellIdentifier] autorelease];            [cell setTokenViewDelegate:self];            executorAddButton = [UIButton buttonWithType:UIButtonTypeContactAdd];            executorAddButton.center =                 CGPointMake(tableView.frame.size.width - executorAddButton.frame.size.width, executorAddButton.frame.size.height);            [cell addSubview:executorAddButton];            [executorAddButton addTarget:self action:@selector(showEmployeesDictionary:) forControlEvents:UIControlEventTouchUpInside];            executorAddButton.hidden = (viewMode == constModeView);            [cell setTitle:NSLocalizedString(@"ErrandExecutorTitle", nil)];                        for (DocErrandExecutor *executor in [docEntity selectExecutorsForErrandWithId:errand.id]) { //errand.executors != [docEntity selectExecutorsForErrandWithId:errand.id] if have duplicate errand!!!                [cell addValue:executor.executorName withValueId:executor.executorId forAccessType:accessLevel];            }            self.errandExecutors = cell.tokenField.tokenField.tokensArray;		}		return cell;			}		else if (indexPath.row == 3) {		cellIdentifier = @"ErrandTextEditViewCell";		iPadTextEditCell *cell = (iPadTextEditCell *)[tableView dequeueReusableCellWithIdentifier:cellIdentifier];		if (cell == nil) {			cell = [[[iPadTextEditCell alloc] initWithReuseIdentifier:cellIdentifier] autorelease];            templateAddButton = [UIButton buttonWithType:UIButtonTypeContactAdd];            templateAddButton.center = CGPointMake(tableView.frame.size.width - templateAddButton.frame.size.width, templateAddButton.frame.size.height);            [cell addSubview:templateAddButton];            [templateAddButton addTarget:self action:@selector(showResolutionTemplates:) forControlEvents:UIControlEventTouchUpInside];            templateAddButton.hidden = (viewMode == constModeView || [resolutionsList count] == 0);            [cell setDelegate:self];				}        [cell initValueView:errand.text forAccessType:accessLevel];        textViewCursorPosition = [cell.value length];		return cell;	}	//shows only when viewMode == constModeView : see numberOfRowsInSection method	else if (indexPath.row == 4) {		cellIdentifier = @"ErrandReportCell";		iPadTextEditCell *cell = (iPadTextEditCell *)[tableView dequeueReusableCellWithIdentifier:cellIdentifier];		if (cell == nil) {			cell = [[[iPadTextEditCell alloc] initWithReuseIdentifier:cellIdentifier] autorelease];		}	        [cell initValueView:errand.report forAccessType:accessLevel];		return cell;		}	    return nil;}- (void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath {	if (accessLevel == constAccessTypeAll) {		if (indexPath.row == 1) {			iPadDateSelectViewController *dateSelectViewController = 				[[iPadDateSelectViewController alloc] initWithFrame:self.view.frame];            [dateSelectViewController setMinimumDate:[NSDate date]];			[dateSelectViewController setDelegate:self];			[dateSelectViewController setValue:((errand.dueDate != nil) ? [SupportFunctions convertDateToXMLDateTimeString:errand.dueDate] : nil)];			[self.navigationController pushViewController:dateSelectViewController animated:YES];			[dateSelectViewController release];				}	}}- (void)tableView:(UITableView *)tableView accessoryButtonTappedForRowWithIndexPath:(NSIndexPath *)indexPath {    [tableView selectRowAtIndexPath:indexPath animated:NO scrollPosition:UITableViewScrollPositionNone];    [self tableView:tableView didSelectRowAtIndexPath:indexPath];}#pragma mark UITextViewDelegate methods- (BOOL)textViewShouldBeginEditing:(UITextView *)textView {	NSLog(@"iPadErrandViewController textViewShouldBeginEditing");	indexToScroll = [[errandTableView getScrollPosition:textView] retain];    NSIndexPath *indexPath = [NSIndexPath indexPathForRow:3 inSection:0];    [errandTableView scrollToRowAtIndexPath:indexPath atScrollPosition:UITableViewScrollPositionTop animated:YES];	return YES;}- (void)textViewDidEndEditing:(UITextView *)textView {	NSLog(@"iPadErrandViewController textViewDidEndEditing");    [indexToScroll release];	indexToScroll = nil;    textViewCursorPosition = [textView.text length];}- (void)textViewDidChange:(UITextView *)textView {	NSLog(@"iPadErrandViewController textViewDidChange");    [self saveValueWithId:constEmptyStringValue andText:textView.text forParamWithIndex:3];    textViewCursorPosition = textView.selectedRange.location;}- (void)textViewDidChangeSelection:(UITextView *)textView {	NSLog(@"iPadErrandViewController textViewDidChangeSelection");    textViewCursorPosition = textView.selectedRange.location;}#pragma mark iPadTextListViewControllerDelegate methods- (void)didSelectText:(NSString *)text {    NSLog(@"iPadErrandViewController did select resolution template: %@", text);    [resolutionTemplatesPopover dismissPopoverAnimated:YES];        NSIndexPath *indexPath = [NSIndexPath indexPathForRow:3 inSection:0];    iPadTextEditCell * textEditCell = (iPadTextEditCell *)[errandTableView cellForRowAtIndexPath:indexPath];    NSRange range = NSMakeRange(textViewCursorPosition, 0);    NSString * newText = text;    // add spaces    if (textViewCursorPosition != 0 &&        [textEditCell.value characterAtIndex:(textViewCursorPosition - 1)] != ' ')        newText = [@" " stringByAppendingString:newText];    if (textViewCursorPosition < [textEditCell.value length] &&        [textEditCell.value characterAtIndex:(textViewCursorPosition + 1)] != ' ')        newText = [newText stringByAppendingString:@" "];        textEditCell.value = [textEditCell.value stringByReplacingCharactersInRange:range withString:newText];        textViewCursorPosition = [textEditCell.value length];        [self saveValueWithId:constEmptyStringValue andText:textEditCell.value forParamWithIndex:3];}#pragma mark other methods- (void)didReceiveMemoryWarning {	NSLog(@"iPadErrand didReceiveMemoryWarning");		    [super didReceiveMemoryWarning];}- (void)dealloc {    [[NSNotificationCenter defaultCenter] removeObserver:self name:UIKeyboardDidShowNotification object:nil];    [[NSNotificationCenter defaultCenter] removeObserver:self name:UIDeviceOrientationDidChangeNotification object:nil];        self.errand = nil;    self.action = nil;    self.errandActions = nil;    self.errandExecutors = nil;        [docEntity release];    [actionsEntity release];        if (errandActionsPopover != nil)        [errandActionsPopover release];    if (employeeCompactFilterPopover != nil)        [employeeCompactFilterPopover release];    if (employeeListCompactViewController != nil)        [employeeListCompactViewController release];    if (resolutionTemplatesPopover != nil)        [resolutionTemplatesPopover release];    if (employeeListViewController != nil)        [employeeListViewController release];        [resolutionsList release];    [errandTableView release];        [super dealloc];}@end