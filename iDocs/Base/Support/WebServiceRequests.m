////  WebServiceRequests.m//  iDoc////  Created by rednek on 12/9/09.//  Copyright 2009 KORUS Consulting. All rights reserved.//#import "WebServiceRequests.h"#import "SupportFunctions.h"#import "UserDefaults.h"#import "Constants.h"@interface WebServiceRequests(PrivateMethods)+ (NSString *)composeParamWithName:(NSString *)paramName andValue:(NSString *)paramValue fromTemplate:(NSString *)paramPropertyTemplate;@end@implementation WebServiceRequests#pragma mark common+ (NSDictionary *)createRequestPackageWithServiceName:(NSString *)name andRequestMessage:(NSString *)message forUser:(UserInfo *)user {	NSArray *keys = [NSArray arrayWithObjects:keyRequestUrl, keyRequestMessage, keyRequestTimeout, nil];		//service url	NSString *wsUrlHost = [UserDefaults stringSettingByKey:constORDServerUrl];	name = [wsUrlHost stringByAppendingString:name];		//request envelope    if (user.ORDToken != nil) {        message = [message stringByReplacingOccurrencesOfString:maskUser withString:user.ORDLogin];        NSString *ORDPassword = [UserDefaults stringSettingByKey:constORDServerPassword];        ORDPassword = (ORDPassword != nil) ? ORDPassword : constEmptyStringValue;        message = [message stringByReplacingOccurrencesOfString:maskPassword withString:ORDPassword];        message = [message stringByReplacingOccurrencesOfString:maskRepository withString:user.ORDRepository];        message = [message stringByReplacingOccurrencesOfString:maskToken withString:user.ORDToken];    }        //server timeout    NSString *timeout = [UserDefaults stringSettingByKey:constServerRequestTimeout];    	NSArray *values = [NSArray arrayWithObjects:name, message, timeout, nil];	return [NSDictionary dictionaryWithObjects:values forKeys:keys];}+ (NSString *)composeParamWithName:(NSString *)paramName andValue:(NSString *)paramValue fromTemplate:(NSString *)paramPropertyTemplate {		if (paramValue == nil || [paramValue isEqualToString:constEmptyStringValue])         return constEmptyStringValue;    //screen XML predefined characters:    paramValue = [SupportFunctions convertXMLPredefinedEntitiesInString:paramValue];	NSString *paramPropertyContainer =     [[paramPropertyTemplate stringByReplacingOccurrencesOfString:maskRequestPropName withString:paramName] stringByReplacingOccurrencesOfString:maskRequestPropValue withString:paramValue];	    return paramPropertyContainer;}#pragma mark auth+ (NSDictionary *)createCheckAuthRequestForUser:(UserInfo *)user {	NSString *dataPath = [[[NSBundle mainBundle] resourcePath] stringByAppendingPathComponent:constAuthWSRequestFile];	NSError *error;	NSString *requestMessage = [NSString stringWithContentsOfFile:dataPath encoding:NSUTF8StringEncoding error:&error];	return [self createRequestPackageWithServiceName:constAuthWSName andRequestMessage:requestMessage forUser:user];	}#pragma mark dictionaries+ (NSDictionary *)createDictionariesSyncRequestForUser:(UserInfo *)user {	NSString *dataPath = [[[NSBundle mainBundle] resourcePath] stringByAppendingPathComponent:constDicWSRequestFile];	NSError *error;	NSString *requestMessage = [NSString stringWithContentsOfFile:dataPath encoding:NSUTF8StringEncoding error:&error];	NSString *checkDate = [UserDefaults stringSettingByKey:constDictionariesLastUpdatedDate];    checkDate = (checkDate != nil) ? checkDate : constEmptyStringValue;	requestMessage = [requestMessage stringByReplacingOccurrencesOfString:maskDicCheckDate withString:checkDate];	return [self createRequestPackageWithServiceName:constDicWSName andRequestMessage:requestMessage forUser:user];	}#pragma mark my tasks structure+ (NSDictionary *)createRequestOfTaskListInBlock:(NSString *)blockName forUser:(UserInfo *)user {	NSString *dataPath = [[[NSBundle mainBundle] resourcePath] stringByAppendingPathComponent:constTaskListBlockWSRequestFile];	NSError *error;	NSString *requestMessage = [NSString stringWithContentsOfFile:dataPath encoding:NSUTF8StringEncoding error:&error];	requestMessage = [requestMessage stringByReplacingOccurrencesOfString:maskTaskBlockName withString:blockName];	return [self createRequestPackageWithServiceName:constTaskListWSName andRequestMessage:requestMessage forUser:user];	}#pragma mark docs on control structure+ (NSDictionary *)createRequestOfDocListOnControlForUser:(UserInfo *)user {	NSString *dataPath = [[[NSBundle mainBundle] resourcePath] stringByAppendingPathComponent:constDocListOnControlWSRequestFile];	NSError *error;	NSString *requestMessage = [NSString stringWithContentsOfFile:dataPath encoding:NSUTF8StringEncoding error:&error];	return [self createRequestPackageWithServiceName:constDocListOnControlWSName andRequestMessage:requestMessage forUser:user];	}#pragma mark task info+ (NSDictionary *)createRequestOfTaskInfoForTaskId:(NSString *)taskId andDocId:(NSString *)docId forUser:(UserInfo *)user {	NSString *dataPath = [[[NSBundle mainBundle] resourcePath] stringByAppendingPathComponent:constTaskInfoWSRequestFile];	NSError *error;	NSString *requestMessage = [NSString stringWithContentsOfFile:dataPath encoding:NSUTF8StringEncoding error:&error];	requestMessage = [requestMessage stringByReplacingOccurrencesOfString:maskTaskId withString:taskId];	requestMessage = [requestMessage stringByReplacingOccurrencesOfString:maskDocId withString:docId];			return [self createRequestPackageWithServiceName:constTaskInfoWSName andRequestMessage:requestMessage forUser:user];	}#pragma mark doc info+ (NSDictionary *)createRequestOfDocs:(NSArray *)docsToSync forUser:(UserInfo *)user {      NSError *error;    NSString *requestDataPath = [[[NSBundle mainBundle] resourcePath] stringByAppendingPathComponent:constDocsInfoWSRequestFile];    NSString *dataObjectTemplatePath = [[[NSBundle mainBundle] resourcePath] stringByAppendingPathComponent:constRequestDataObjectFile];    NSString *propertyTemplatePath = [[[NSBundle mainBundle] resourcePath] stringByAppendingPathComponent:constRequestPropFile];    NSString *requestMessage = [NSString stringWithContentsOfFile:requestDataPath encoding:NSUTF8StringEncoding error:&error];        NSString *dataObjects = constEmptyStringValue;    for (NSString *docId in docsToSync) {        NSString *propertyTemplate = [NSString stringWithContentsOfFile:propertyTemplatePath encoding:NSUTF8StringEncoding error:&error];        NSString *paramsString = [self composeParamWithName:constDocsInfoParamName andValue:docId fromTemplate:propertyTemplate];                NSString *dataObject = [NSString stringWithContentsOfFile:dataObjectTemplatePath encoding:NSUTF8StringEncoding error:&error];                dataObject = [dataObject stringByReplacingOccurrencesOfString:maskRequestProperties withString:paramsString];                dataObjects = [dataObjects stringByAppendingString:dataObject];	            }    requestMessage = [requestMessage stringByReplacingOccurrencesOfString:maskRequestDataObjects withString:dataObjects];       			return [self createRequestPackageWithServiceName:constDocsInfoWSName andRequestMessage:requestMessage forUser:user];	}#pragma mark client settings+ (NSDictionary *)createClientSettingsSyncRequestForUser:(UserInfo *)user {	NSString *dataPath = [[[NSBundle mainBundle] resourcePath] stringByAppendingPathComponent:constClientSettingsSyncWSRequestFile];	NSError *error;	NSString *requestMessage = [NSString stringWithContentsOfFile:dataPath encoding:NSUTF8StringEncoding error:&error];	return [self createRequestPackageWithServiceName:constClientSettingsSyncWSName andRequestMessage:requestMessage forUser:user];    }+ (NSDictionary *)createClientSettingsCheckSumRequestForUser:(UserInfo *)user {    NSString *dataPath = [[[NSBundle mainBundle] resourcePath] stringByAppendingPathComponent:constClientSettingsCheckSumWSRequestFile];	NSError *error;	NSString *requestMessage = [NSString stringWithContentsOfFile:dataPath encoding:NSUTF8StringEncoding error:&error];	return [self createRequestPackageWithServiceName:constClientSettingsSyncWSName andRequestMessage:requestMessage forUser:user];    }#pragma mark attachments+ (NSDictionary *)createRequestOfAttachmentContent:(NSString *)attachmentId forUser:(UserInfo *)user {	NSString *dataPath = [[[NSBundle mainBundle] resourcePath] stringByAppendingPathComponent:constAttachmentContentWSRequestFile];	NSError *error;	NSString *requestMessage = [NSString stringWithContentsOfFile:dataPath encoding:NSUTF8StringEncoding error:&error];	requestMessage = [requestMessage stringByReplacingOccurrencesOfString:maskAttachmentId withString:attachmentId];			return [self createRequestPackageWithServiceName:constAttachmentContentWSName andRequestMessage:requestMessage forUser:user];    }+ (NSDictionary *)createRequestOfAttachmentFile:(NSString *)attachmentId forUser:(UserInfo *)user {    NSString *requestMessage = constAttachmentServletRequest;    requestMessage = [requestMessage stringByReplacingOccurrencesOfString:maskAttachmentId withString:attachmentId];    return [self createRequestPackageWithServiceName:constAttachmentServletName andRequestMessage:requestMessage forUser:user];}#pragma mark actions + (NSDictionary *)createRequestOfActionToSyncSubmit:(ActionToSync *)action forUser:(UserInfo *)user {    return [self createRequestOfActionsToSyncSubmit:[NSArray arrayWithObject:action] forUser:user];}+ (NSDictionary *)createRequestOfActionsToSyncSubmit:(NSArray *)actions forUser:(UserInfo *)user {    NSError *error;    NSString *requestDataPath = [[[NSBundle mainBundle] resourcePath] stringByAppendingPathComponent:constExecuteActionsToSyncWSRequestFile];    NSString *dataObjectTemplatePath = [[[NSBundle mainBundle] resourcePath] stringByAppendingPathComponent:constRequestDataObjectFile];    NSString *propertyTemplatePath = [[[NSBundle mainBundle] resourcePath] stringByAppendingPathComponent:constRequestPropFile];    NSString *requestMessage = [NSString stringWithContentsOfFile:requestDataPath encoding:NSUTF8StringEncoding error:&error];    NSString *dataObjects = constEmptyStringValue;    for (ActionToSync *action in actions) {        NSString *dataObject = [NSString stringWithContentsOfFile:dataObjectTemplatePath encoding:NSUTF8StringEncoding error:&error];        NSString *propertyTemplate = [NSString stringWithContentsOfFile:propertyTemplatePath encoding:NSUTF8StringEncoding error:&error];        NSString *paramsString = constEmptyStringValue;        int requestType = [action.requestType intValue];                if (requestType == constRequestTypeTaskAction) { //common task actions            paramsString = [paramsString stringByAppendingString:[self composeParamWithName:constActionToSyncTask andValue:action.taskId fromTemplate:propertyTemplate]];            paramsString = [paramsString stringByAppendingString:[self composeParamWithName:constActionToSyncDocument andValue:action.docId fromTemplate:propertyTemplate]];            paramsString = [paramsString stringByAppendingString:[self composeParamWithName:constActionToSyncAction andValue:action.actionId fromTemplate:propertyTemplate]];            paramsString = [paramsString stringByAppendingString:[self composeParamWithName:constActionToSyncComment andValue:action.actionResolution fromTemplate:propertyTemplate]];            if( action.attachments != nil ) {                paramsString = [paramsString stringByAppendingString:[self composeParamWithName:constActionToSyncAttachments andValue:action.attachments fromTemplate:propertyTemplate]];            }        }        else if (requestType == constRequestTypeCreateOrUpdateErrandAction) { //save errand project, send errand project, create errand            if ([constErrandActionTypeSaveProject isEqualToString:action.actionType] ||                 [constErrandActionTypeSendOnExecutionProject isEqualToString:action.actionType]) {                paramsString = [paramsString stringByAppendingString:[self composeParamWithName:constActionToSyncErrand andValue:action.errandId fromTemplate:propertyTemplate]];            }            else {                paramsString = [paramsString stringByAppendingString:[self composeParamWithName:constActionToSyncTask andValue:action.taskId fromTemplate:propertyTemplate]];            }            paramsString = [paramsString stringByAppendingString:[self composeParamWithName:constActionToSyncDocument andValue:action.docId fromTemplate:propertyTemplate]];            paramsString = [paramsString stringByAppendingString:[self composeParamWithName:constActionToSyncAction andValue:action.actionId fromTemplate:propertyTemplate]];            paramsString = [paramsString stringByAppendingString:[self composeParamWithName:constActionToSyncComment andValue:action.actionResolution fromTemplate:propertyTemplate]];            paramsString = [paramsString stringByAppendingString:[self composeParamWithName:constActionToSyncResolution andValue:action.errandText fromTemplate:propertyTemplate]];            paramsString = [paramsString stringByAppendingString:[self composeParamWithName:constActionToSyncPerformer andValue:action.errandExecutorId fromTemplate:propertyTemplate]];            paramsString = [paramsString stringByAppendingString:[self composeParamWithName:constActionToSyncOnControl andValue:action.errandOnControl fromTemplate:propertyTemplate]];            paramsString = [paramsString stringByAppendingString:[self composeParamWithName:constActionToSyncErrandMajorExecutorId andValue:action.systemErrandMajorExecutorId fromTemplate:propertyTemplate]];            paramsString = [paramsString stringByAppendingString:[self composeParamWithName:constActionToSyncControlDate andValue:action.errandDueDate fromTemplate:propertyTemplate]];        }        else if (requestType == constRequestTypeErrandWorkflowAction) { //delete errand project / cancel errand            paramsString = [paramsString stringByAppendingString:[self composeParamWithName:constActionToSyncAction andValue:action.actionId fromTemplate:propertyTemplate]];            paramsString = [paramsString stringByAppendingString:[self composeParamWithName:constActionToSyncErrand andValue:action.errandId fromTemplate:propertyTemplate]];        }                dataObject = [dataObject stringByReplacingOccurrencesOfString:maskRequestProperties withString:paramsString];        dataObjects = [dataObjects stringByAppendingString:dataObject];    }	requestMessage = [requestMessage stringByReplacingOccurrencesOfString:maskRequestDataObjects withString:dataObjects];    return [self createRequestPackageWithServiceName:constExecuteActionsToSyncWSName andRequestMessage:requestMessage forUser:user];    }@end