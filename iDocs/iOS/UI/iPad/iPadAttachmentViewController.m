////  iPadAttachmentViewController.m//  iDoc////  Created by Dmitry Likhachev on 11/29/09.//  Copyright 2009 KORUS Consulting. All rights reserved.//#import "iPadAttachmentViewController.h"#import "HFSUILabel.h"#import "iPadThemeBuildHelper.h"#import "SystemDataEntity.h"#import "SupportFunctions.h"#import "UIWebView+Block.h"@interface iPadAttachmentViewController(PrivateMethods)- (void)closeButtonPressed;@end@implementation iPadAttachmentViewController#pragma mark custom methods - data handling- (void)loadAttachmentFile:(NSString *)attachmentFileName withPopupPanelHeader:(NSString *)headerTitle {	NSLog(@"iPadAttachmentViewController loadAttachment:%@ withPopupPanelHeader:%@", attachmentFileName, headerTitle);	if (headerTitle != nil) {		[self setTitleForPopupPanelHeader:headerTitle];	}    	    attachmentPath = [[SupportFunctions createPathForAttachment:attachmentFileName] retain];//    NSLog(@"loadAttachmentFile withPopupPanelHeader attachmentPath %@", attachmentPath);    [previewer setCurrentPreviewItemIndex:0];    [previewer reloadData];}#pragma mark custom methods - init- (id)initWithFrame:(CGRect)newFrame {	NSLog(@"iPadAttachmentViewController initWithNibName");	if ((self = [super initWithNibName:nil bundle:nil])) {	        		self.navigationController.navigationBarHidden = YES;		self.view.autoresizesSubviews = YES;		self.view.autoresizingMask = UIViewAutoresizingFlexibleWidth | UIViewAutoresizingFlexibleHeight;		self.view.frame = newFrame;		        previewer = [[QLPreviewController alloc] init];        previewer.view.frame = self.view.bounds;        previewer.view.contentScaleFactor = constViewScaleFactor;        [previewer setDataSource:self];        [self.view addSubview:previewer.view];	}	return self;}- (id)initWithPlaceholder:(iPadPopupLayoutView *)popupPanel {	NSLog(@"iPadAttachmentViewController initWithPlaceholder");	if((self=[super initWithNibName:nil bundle:nil])){		container = [[iPadHeaderBodyFooterLayoutView alloc] init];		container.frame = popupPanel.containerView.frame;		container.showFooter = NO;			        previewer = [[QLPreviewController alloc] init];        previewer.view.frame = container.bodyPanel.bounds;        previewer.view.contentScaleFactor = 3.0f;        [previewer setDataSource:self];        [container.bodyPanel addSubview:previewer.view];                UIColor *buttonColor = [iPadThemeBuildHelper commonButtonFontColor2];        UIColor *shadowColor = [iPadThemeBuildHelper commonShadowColor2]; 		closeButton = [container prepareHeaderLeftButtonWithCaption:@"CancelButtonTitle"                                                        captionColor:buttonColor                                                       captionShadow:shadowColor                                                         imageOrNil:nil];		[closeButton addTarget:self action:@selector(closeButtonPressed) forControlEvents:UIControlEventTouchUpInside];		[container.headerPanel addSubview:closeButton];		self.view = container;	}	return self;}#pragma mark custom methods - view behavior- (void)setDelegate:(id<iPadAttachmentViewControllerDelegate>) newDelegate {	delegate = newDelegate;}- (void)setTitleForPopupPanelHeader:(NSString *)newTitle {	if (container != nil && [container isMemberOfClass:iPadHeaderBodyFooterLayoutView.class]) {		[[container.headerPanel viewWithTag:constHeaderCenterTitleWithCaption] removeFromSuperview];        UIColor *titleColor = [iPadThemeBuildHelper commonHeaderFontColor2];        UIColor *shadowColor = [iPadThemeBuildHelper commonShadowColor2];                 [container.headerPanel addSubview:[container prepareHeaderCenterTitleWithCaption:NSLocalizedString(newTitle, nil)                                                                             captionColor:titleColor                                                                        captionShadow:shadowColor]];	}}- (void)closeButtonPressed {	NSLog(@"iPadAttachmentViewController closeButtonPressed");		if (delegate != nil && [delegate respondsToSelector:@selector(attachmentViewCloseButtonPressed)]) {		[delegate attachmentViewCloseButtonPressed];	}	}- (void)setCloseButtonHidden:(BOOL)isHidden {	closeButton.hidden = isHidden;}#pragma mark UIViewController methods- (void)viewWillAppear:(BOOL)animated {	[super viewWillAppear:animated];}#pragma mark Preview Controller- (NSInteger)numberOfPreviewItemsInPreviewController:(QLPreviewController *)controller {	return 1;}- (id <QLPreviewItem>)previewController:(QLPreviewController *)controller previewItemAtIndex:(NSInteger)index {    if( attachmentPath ) {//        NSLog(@"DataSource previewController attachmentPath %@", attachmentPath);        return [NSURL fileURLWithPath:attachmentPath];    }    return nil;}#pragma mark other methods- (void)didReceiveMemoryWarning {	NSLog(@"iPadAttachmentViewController didReceiveMemoryWarning");		    [super didReceiveMemoryWarning];}- (void)dealloc {    if (container != nil) {        [container release];    }	    [previewer release];    [attachmentPath release];        delegate = nil;        [super dealloc];}@end